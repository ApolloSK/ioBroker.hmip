{"version":3,"file":"static/js/src_Components_jsx.7c3881d3.chunk.js","mappings":"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","sources":["HmipComponent.jsx","Components.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@mui/styles';\r\n\r\nimport {\r\n    LinearProgress,\r\n    Button,\r\n    CircularProgress,\r\n} from '@mui/material';\r\n\r\n// important to make from package and not from some children.\r\n// invalid\r\n// import ConfigGeneric from '@iobroker/adapter-react-v5/ConfigGeneric';\r\n// valid\r\nimport { ConfigGeneric, Confirm, I18n } from '@iobroker/adapter-react-v5';\r\n\r\nconst styles = () => ({\r\n});\r\n\r\nclass HmipComponent extends ConfigGeneric {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            response: false,\r\n            running: false,\r\n            initialized: false,\r\n            alive: false,\r\n            error: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n        const state = this.props.socket.getState(`hmip.${this.props.instance}.alive`);\r\n        if (state && state.val) {\r\n            this.setState({ alive: true, initialized: true }, () => this.askState());\r\n        }\r\n        this.props.socket.subscribeState(`system.adapter.hmip.${this.props.instance}.alive`, this.onAliveChanged);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        super.componentWillUnmount();\r\n        this.props.socket.unsubscribeState(`system.adapter.hmip.${this.props.instance}.alive`, this.onAliveChanged);\r\n        if (this.askTimeout) {\r\n            clearTimeout(this.askTimeout);\r\n            this.askTimeout = null;\r\n        }\r\n    }\r\n\r\n    async askState() {\r\n        const response = await this.props.socket.sendTo(`hmip.${this.props.instance}`, 'requestTokenState', null);\r\n\r\n        if (this.handleResponse(response)) {\r\n            this.askTimeout = this.askTimeout || setTimeout(() => {\r\n                this.askTimeout = null;\r\n                this.askState()\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    handleResponse(response) {\r\n        switch (response.state) {\r\n            case 'startedTokenCreation':\r\n                this.setState({ response: 'started token creation', running: true });\r\n                return true;\r\n            case 'waitForBlueButton':\r\n                this.setState({ response: 'press blue button on accesspoint', running: true });\r\n                return true;\r\n            case 'confirmToken':\r\n                this.setState({ response: 'confirming token', running: true });\r\n                return true;\r\n            case 'errorOccurred':\r\n                this.setState({ response: 'error occurred during token generation, look at the logs', running: false, error: true });\r\n                break;\r\n            case 'idle':\r\n                this.setState({ response: 'press \"request token\"', running: false });\r\n                break;\r\n            case 'tokenCreated': {\r\n                this.setState({ response: 'token created, save settings to use your accesspoint', running: false });\r\n                ConfigGeneric.setValue(this.props.data, 'authToken', response.authToken);\r\n                ConfigGeneric.setValue(this.props.data, 'clientAuthToken', response.clientAuthToken);\r\n                ConfigGeneric.setValue(this.props.data, 'clientId', response.clientId);\r\n                this.props.onChange(this.props.data, undefined, () =>\r\n                    this.props.forceUpdate(['authToken', 'clientAuthToken', 'clientId'], this.props.data));\r\n                break;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async requestToken() {\r\n        const config = {\r\n            accessPointSgtin: ConfigGeneric.getValue(this.props.data, 'accessPointSgtin'),\r\n            clientId: ConfigGeneric.getValue(this.props.data, 'clientId'),\r\n            pin: ConfigGeneric.getValue(this.props.data, 'pin'),\r\n            deviceName: ConfigGeneric.getValue(this.props.data, 'deviceName'),\r\n        }\r\n        this.setState({ response: 'started token creation', running: true, error: false });\r\n        const response = await this.props.socket.sendTo(`hmip.${this.props.instance}`, 'requestToken', config);\r\n        if (this.handleResponse(response)) {\r\n            this.askTimeout = this.askTimeout || setTimeout(() => {\r\n                this.askTimeout = null;\r\n                this.askState();\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    onAliveChanged = (id, state) => {\r\n        const alive = state ? state.val : false;\r\n        if (alive !== this.state.alive) {\r\n            this.setState({ alive }, () => {\r\n                if (alive && !this.state.initialized) {\r\n                    setTimeout(() =>\r\n                        this.setState({ initialized: true }, () => this.askState(), 100));\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    renderItem() {\r\n        if (!this.state.alive && !this.state.initialized) {\r\n            return <div>{I18n.t('custom_hmip_not_alive')}</div>;\r\n        } else if (!this.state.initialized) {\r\n            return <LinearProgress />;\r\n        } else {\r\n            const config = {\r\n                accessPointSgtin: ConfigGeneric.getValue(this.props.data, 'accessPointSgtin'),\r\n                pin: ConfigGeneric.getValue(this.props.data, 'pin'),\r\n            }\r\n\r\n            return <div style={{ width: '100%'}}>\r\n                <div\r\n                    style={{\r\n                        color: this.state.error ? (this.props.themeType === 'dark' ? '#c20000' : '#800000') : undefined,\r\n                    }}\r\n                >\r\n                    {I18n.t(`custom_hmip_${this.state.response}`).replace('custom_hmip_', '')}\r\n                </div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={this.state.running || !config.accessPointSgtin || !config.pin}\r\n                    onClick={() => this.requestToken()}\r\n                >\r\n                    {this.state.running ? <CircularProgress size={22} /> : I18n.t('custom_hmip_request_token')}\r\n                </Button>\r\n            </div>;\r\n        }\r\n    }\r\n}\r\n\r\nHmipComponent.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(HmipComponent);","import HmipComponent from './HmipComponent';\r\n\r\nexport default { HmipComponent };"],"names":["styles","HmipComponent","props","id","state","alive","response","config"],"sourceRoot":""}